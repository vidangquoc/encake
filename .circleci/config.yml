version: 2
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.4.4-jessie-node
        env:
          BUNDLE_JOBS: 1
          BUNDLE_RETRY: 1
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DB_HOST: "%"
          DB_USERNAME: ""
          DB_PASSWORD: ""
      - image: circleci/mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install
      
      # Workaround for an error with mysql2.so loading
      - run:
          name: remove mysql2 temporary
          command: |
            bundle exec gem uninstall mysql2

      - run:
          name: reinstall mysql2 temporary
          command: |
            bundle install --jobs=3 --retry=3 --path vendor/bundle
      #End workaround

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-

      #- run:
      #    name: Yarn Install
      #    command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      #- save_cache:
      #    key: rails-demo-yarn-{{ checksum "yarn.lock" }}
      #    paths:
      #      - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://:3306 -timeout 1m

      - run:
          name: Database setup
          #command: rake db:schema:load --trace
          command: bundle exec rake db:create && bundle exec rake db:test:prepare --trace

      # Run rspec in parallel
      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # Save test results for timing analysis
      - store_test_results:
          path: test_results